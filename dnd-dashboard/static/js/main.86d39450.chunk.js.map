{"version":3,"sources":["registerServiceWorker.js","context/dashboard/index.ts","context/dashboard/actions.ts","components/Icon/index.tsx","components/Dashboard/DashboardNav/index.tsx","components/Dashboard/DashboardItem/index.tsx","utils/objUtils.ts","components/Dashboard/DashboardContent/index.tsx","index.tsx","components/Dashboard/index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","DashboardContext","createContext","initialState","dragging","full","layout","i","x","y","w","h","open","reducer","_ref","type","payload","Object","objectSpread","updateLayout","Icon","React","btn","className","cursor","name","rest","objectWithoutProperties","react","tt_react_ui_2_build","assign","cx","concat","defaultProps","transition","DasboardNav","_React$useContext","_React$useContext$sta","dispatch","flex","pt","map","value","active","find","val","divProps","draggable","onDragStart","e","dataTransfer","setData","onDragEnd","bg","items","justify","key","px","mt","color","display","pin","position","rounded","size","bold","center","uppercase","DashboardItem","label","onClose","onFullScreen","isOne","length","pl","pr","py","font","mr","hover","textProps","onClick","clone","obj","JSON","parse","stringify","isEqual","obj1","obj2","GridLayout","require","SizeMe","reorder","newLayout","_loop","item","push","DashboardContent","objectDestructuringEmpty","_createState","createState","_createState2","slicedToArray","setState","prevLayout","grid","document","getElementsByClassName","plIndex","findIndex","handleClose","handleLayoutChange","changedLayout","index","upIndex","downIndex","curPosition","splice","fullIndex","handleFullScreen","oldPos","current","filter","setTimeout","getPosition","clientRect","getBoundingClientRect","left","clientX","clientY","top","height","width","handleDragEnter","preventDefault","_getPosition","_getPosition2","_x","_y","unshift","handleDragOver","_getPosition3","_getPosition4","cIndex","c","handleDrop","getData","includes","monitorHeight","refreshRate","refreshMode","_ref2","onDragEnter","onDragOver","onDrop","cols","margin","rowHeight","autoSize","draggableHandle","useCSSTransforms","isResizable","onLayoutChange","DashboardItem_DashboardItem","ReactDOM","BrowserRouter","Switch","Route","exact","path","component","props","_React$useReducer","_React$useReducer2","Provider","overflow","text","DashboardNav_DasboardNav","DashboardContent_DashboardContent","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.86d39450.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { createContext, Reducer, Dispatch } from 'react'\n\n// Types:\ntype State = {\n  dragging: boolean\n  full: boolean\n  open: boolean\n  layout: any\n}\n\ntype Ctx = {\n  state?: State\n  dispatch?: Dispatch<any>\n}\n\n// Context:\nexport const DashboardContext = createContext<Ctx>({})\n\n// Init state:\nexport const initialState: State = {\n  dragging: false,\n  full: false,\n  layout: [\n    { i: 'a', x: 0, y: 0, w: 1, h: 1 },\n    { i: 'b', x: 1, y: 0, w: 1, h: 1 },\n    { i: 'c', x: 0, y: 1, w: 1, h: 1 },\n    { i: 'd', x: 1, y: 1, w: 1, h: 1 }\n  ],\n  open: false\n}\n\n// Reducer\nexport const reducer: Reducer<State, any> = (state: any, { type, payload }: any) => {\n  switch (type) {\n    case 'DRAGGING':\n      return { ...state, dragging: !state.dragging }\n    case 'TOGGLE_NAV':\n      return { ...state, open: !state.open }\n    case 'TOGGLE_FULL_SCREEN':\n      return { ...state, full: !state.full }\n    case 'UPDATE_LAYOUT':\n      return { ...state, layout: payload.layout }\n    default:\n      return state\n  }\n}\n","// Action names:\nexport const DRAGGING = 'DRAGGING'\nexport const TOGGLE_FULL_SCREEN = 'TOGGLE_FULL_SCREEN'\nexport const TOGGLE_NAV = 'TOGGLE_NAV'\nexport const UPDATE_LAYOUT = 'UPDATE_LAYOUT'\n\n// Action creator:\nexport const dragging = () => ({ type: DRAGGING })\nexport const toggleFullScreen = () => ({ type: TOGGLE_FULL_SCREEN })\nexport const toggleNav = () => ({ type: TOGGLE_NAV })\nexport const updateLayout = (layout: any) => ({type: UPDATE_LAYOUT, payload: {layout}})\n","import * as React from 'react'\nimport cx from 'classnames'\nimport { Text, TextProps } from 'tt-react-ui-2'\n\n// ================================================================================================\n\nexport interface IconProps extends TextProps {\n  btn?: boolean\n  className?: string\n  name: string\n}\n\nexport const Icon: React.FunctionComponent<IconProps> = React.memo(\n  ({ btn, className, cursor, name, ...rest }) => (\n    <Text\n      {...rest}\n      className={cx(className && className, 'Icon', `icon-${name}`)}\n      cursor={btn ? 'hover:pointer' : cursor}\n    />\n  )\n)\n\nIcon.defaultProps = {\n  transition: true\n}\n","import * as React from 'react'\nimport cx from 'classnames'\nimport { Box, Text } from 'tt-react-ui-2'\n\n// Context:\nimport { DashboardContext } from 'context/dashboard'\nimport { dragging } from 'context/dashboard/actions'\n\n// Components:\nimport { Icon } from 'components/Icon'\n\n// Styles:\nimport './style.css'\n\n// ================================================================================================\n\nexport interface DasboardNavProps {\n  open: boolean\n}\n\nexport const DasboardNav: React.FunctionComponent<DasboardNavProps> = ({ open }) => {\n  const {\n    state: { full, layout },\n    dispatch\n  } = React.useContext(DashboardContext)\n\n  const items = [\"a\", \"b\", \"c\", \"d\"]\n\n\n  return (\n    <Box className={cx('DashboardNav', open && 'open')} h=\"full\">\n      <Box className={cx('DashboardNav__content')} flex=\"col\" h=\"full\" pt=\"8\" type=\"nav\">\n        {items.map(value => {\n          const active = layout.find((val: any) => value === val.i)\n          return (\n            <Box\n              className={cx('DashboardNav__item', !full && !active && 'grabbable')}\n              divProps={{\n                draggable: !full && !active,\n                onDragStart: (e: React.DragEvent<HTMLDivElement>) => {\n                  e.dataTransfer.setData('type', value)\n                  dispatch(dragging())\n                },\n                onDragEnd: () => {\n                  dispatch(dragging())\n                }\n              }}\n              bg=\"fourth\"\n              flex=\"col\"\n              items=\"center\"\n              justify=\"center\"\n              key={value}\n              px=\"2\"\n              mt=\"6\"\n            >\n              {active && (\n                <Icon\n                  bg=\"white\"\n                  className=\"DashboardNav__check\"\n                  color=\"third\"\n                  display=\"flex\"\n                  h=\"5\"\n                  items=\"center\"\n                  justify=\"center\"\n                  name=\"check\"\n                  pin=\"t, r\"\n                  position=\"absolute\"\n                  rounded=\"1/2\"\n                  size=\"xs\"\n                  w=\"5\"\n                />\n              )}\n              <Text bold center className=\"DashboardNav__label\"  uppercase>\n                {value}\n              </Text>\n            </Box>\n          )\n        })}\n      </Box>\n    </Box>\n  )\n}\n","import * as React from 'react'\nimport cx from 'classnames'\nimport { Box, Button, Headline } from 'tt-react-ui-2'\n\n// Contexts:\nimport { DashboardContext } from 'context/dashboard'\n\n// Component:\nimport { Icon } from 'components/Icon'\n\n// Styles:\nimport './style.css'\n\n// ================================================================================================\n\nexport interface DashboardItemProps {\n  className?: string\n  i: string\n  label: string\n  onClose: (i: string) => void\n  onFullScreen: (i: string) => void\n}\n\nexport const DashboardItem: React.FunctionComponent<DashboardItemProps> = ({\n  className,\n  i,\n  label,\n  onClose,\n  onFullScreen\n}) => {\n  // context:\n  const {\n    state: { full, layout }\n  } = React.useContext(DashboardContext)\n\n  const isOne = layout.length === 1\n\n  return (\n    <Box\n      className={cx('DashboardItem', i === 'pl' && 'pl')}\n      bg=\"second\"\n      display=\"block\"\n      h=\"full\"\n      w=\"full\"\n    >\n      {i !== 'pl' && (\n        <Box\n          className={cx('DashboardItem__header')}\n          items=\"center\"\n          justify=\"between\"\n          pl=\"8\"\n          pr=\"4\"\n          py=\"2\"\n        >\n          <Headline className=\"DashboardItem__headline\" font=\"bold\" size=\"xl\" uppercase>\n            {label}\n          </Headline>\n          <Box w=\"auto\">\n            {!full && !isOne && (\n              <Icon className=\"draghandler\" mr=\"3\" name=\"arrows\" cursor=\"hover:move\" />\n            )}\n            {!full && (\n              <Icon\n                btn\n                mr=\"3\"\n                name=\"trash\"\n                hover=\"third\"\n                textProps={{ onClick: () => onClose(i) }}\n              />\n            )}\n            <Icon\n              btn\n              name={full ? 'compress' : 'expand'}\n              hover=\"third\"\n              textProps={{ onClick: () => onFullScreen(i) }}\n            />\n          </Box>\n        </Box>\n      )}\n    </Box>\n  )\n}\n","export const clone = (obj: Record<string, any>) =>\n  JSON.parse(JSON.stringify(obj))\n\nexport const isEqual = (obj1: Record<string, any>, obj2: Record<string, any>): boolean =>\n  JSON.stringify(obj1) === JSON.stringify(obj2)\n","import * as React from 'react'\nimport cx from 'classnames'\nimport { Box, createState } from 'tt-react-ui-2'\n\nconst GridLayout = require('react-grid-layout')\nconst { SizeMe } = require('react-sizeme')\n\n// Contexts:\nimport { DashboardContext } from 'context/dashboard'\nimport { toggleFullScreen, updateLayout } from 'context/dashboard/actions'\n\n// Components:\nimport { DashboardItem } from '../DashboardItem'\n\n// Utils:\nimport { clone, isEqual } from 'utils/objUtils'\n\n// Styles:\nimport '../../../../node_modules/react-grid-layout/css/styles.css'\nimport './style.css'\n\n// Util function:\nconst reorder = (layout: any) => {\n  const position = [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }, { x: 1, y: 1 }]\n  let newLayout = []\n  for (let i = 0; i < position.length; i++) {\n    const item = layout.find((item: any) => item.x === position[i].x && item.y === position[i].y)\n    item && newLayout.push(item)\n  }\n  return newLayout\n}\n\n// ================================================================================================\n\nexport interface DashboardContentProps {}\n\nexport const DashboardContent: React.FunctionComponent<DashboardContentProps> = ({}) => {\n  // Items:\n  const items = ['a', 'b', 'c', 'd']\n\n  // Contexts:\n  const {\n    state: { dragging, full },\n    dispatch\n  } = React.useContext(DashboardContext)\n\n  // Hooks:\n  const [state, setState] = createState({\n    layout: [\n      { i: 'a', x: 0, y: 0, w: 1, h: 1 },\n      { i: 'b', x: 1, y: 0, w: 1, h: 1 },\n      { i: 'c', x: 0, y: 1, w: 1, h: 1 },\n      { i: 'd', x: 1, y: 1, w: 1, h: 1 }\n    ]\n  })\n\n  const { layout } = state\n\n  const prevLayout = React.useRef(null)\n\n  let grid = document.getElementsByClassName('DashboardContent__wrapper')[0]\n\n  React.useEffect(() => {\n    const plIndex = layout.findIndex(item => item.i === 'pl')\n    !dragging && plIndex >= 0 && handleClose('pl')\n  })\n\n  // Handlers:\n  const handleLayoutChange = (changedLayout: any) => {\n    let newLayout = clone(changedLayout)\n    const index = newLayout.findIndex((item: any) => item.y > 1)\n    if (index > -1) {\n      switch (newLayout.length) {\n        case 4:\n          newLayout[index].y--\n          newLayout[index].x > 0 ? newLayout[index].x-- : newLayout[index].x++\n          newLayout = reorder(newLayout)\n          break\n        case 3:\n          let upIndex = newLayout.findIndex((item: any) => item.y === 0)\n          let downIndex = newLayout.findIndex((item: any) => item.y === 1)\n          if (newLayout[index].w > 1) {\n            newLayout[index].y = 0\n            newLayout[index].w = 1\n            newLayout[index].x = newLayout[upIndex].x === 1 ? 0 : 1\n            newLayout[downIndex].w = 2\n          } else {\n            if (newLayout[downIndex].w < 2) {\n              newLayout[index].y--\n              newLayout[index].x > 0 ? newLayout[index].x-- : newLayout[index].x++\n            } else {\n              let upIndex = newLayout.findIndex((item: any) => item.y === 0)\n              newLayout[upIndex].x = 0\n              newLayout[upIndex].w = 2\n              newLayout[downIndex].w = 1\n              newLayout[downIndex].x = 1\n              newLayout[index].y = 1\n              newLayout[index].x = 0\n            }\n          }\n          break\n        default:\n          break\n      }\n    }\n    !isEqual(newLayout, layout) && setState({ layout: newLayout })\n  }\n\n  const handleClose = (i: string) => {\n    const newLayout = clone(layout)\n    const index = newLayout.findIndex((item: any) => item.i === i)\n    const curPosition = [newLayout[index].x, newLayout[index].y]\n    newLayout.splice(index, 1)\n    switch (newLayout.length) {\n      case 3:\n        let fullIndex = layout.findIndex(item => item.y === curPosition[1])\n        newLayout[fullIndex].x = 0\n        newLayout[fullIndex].w = 2\n        break\n      case 2:\n        newLayout[0].x = 0\n        newLayout[0].y = 0\n        newLayout[0].w = 2\n        newLayout[1].x = 1\n        newLayout[1].y = 0\n        newLayout[1].w = 2\n        break\n      case 1:\n        newLayout[0].x = 0\n        newLayout[0].y = 0\n        newLayout[0].w = 2\n        newLayout[0].h = 2\n    }\n    setState({ layout: newLayout })\n    i !== 'pl' && dispatch(updateLayout(newLayout))\n  }\n\n  const handleFullScreen = (i: string) => {\n    if (full) {\n      const oldPos = prevLayout.current.filter((item: any) => item.i === i)\n      setState({ layout: oldPos })\n      setTimeout(() => {\n        setState({ layout: prevLayout.current })\n        dispatch(toggleFullScreen())\n      }, 600)\n    } else {\n      prevLayout.current = clone(layout)\n      const fullLayout = [{ i, x: 0, y: 0, w: 2, h: 2 }]\n      setState({ layout: fullLayout })\n      dispatch(toggleFullScreen())\n    }\n  }\n\n  const getPosition = (e: React.DragEvent<HTMLDivElement>) => {\n    const clientRect = grid.getBoundingClientRect()\n    const left = e.clientX - clientRect.left\n    const top = e.clientY - clientRect.top\n    const x = top <= clientRect.height / 2 ? 0 : 1\n    const y = left <= clientRect.width / 2 ? 0 : 1\n    return [x, y]\n  }\n\n  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault()\n    const [_x, _y] = getPosition(e)\n    let newLayout\n    const plIndex = layout.findIndex(item => item.i === 'pl')\n    if (plIndex < 0) {\n      switch (layout.length) {\n        case 1:\n          const curItem = layout[0]\n          newLayout = [\n            { i: 'pl', x: 0, y: _x, w: 2, h: 1 },\n            { i: curItem.i, x: 0, y: _x === 0 ? 1 : 0, w: 2, h: 1 }\n          ]\n          setState({ layout: newLayout })\n          break\n        case 2:\n          newLayout = reorder(\n            layout.map(item => ({\n              i: item.i,\n              x: item.x,\n              y: item.y,\n              w: 2,\n              h: 1\n            }))\n          )\n          newLayout[0].y = _x === 0 ? 1 : 0\n          newLayout[0].w = _x === 0 ? 1 : 2\n          newLayout[1].x = 1\n          newLayout[1].y = 1\n          newLayout[1].w = 1\n          newLayout.push({ i: 'pl', x: 0, y: _x < 1 ? 0 : 1, w: _x > 0 ? 1 : 2, h: 1 })\n          setState({ layout: newLayout })\n          break\n        case 3:\n          newLayout = layout.map(item => ({\n            i: item.i,\n            x: item.x,\n            y: item.y,\n            w: 1,\n            h: 1\n          }))\n          newLayout.unshift({ i: 'pl', x: 0, y: _y, w: 1, h: 1 })\n          setState({ layout: newLayout })\n        default:\n          break\n      }\n    }\n  }\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault()\n    let [_x, _y] = getPosition(e)\n    let newLayout = clone(layout)\n    const plIndex = newLayout.findIndex((item: any) => item.i === 'pl')\n    if (plIndex > -1) {\n      switch (newLayout.length) {\n        case 2:\n          newLayout[0].y = _x\n          newLayout[1].y = _x === 0 ? 1 : 0\n          break\n        case 3:\n          if (_x < 1) {\n            let full = newLayout.findIndex((item: any) => item.w === 2)\n            if (full !== plIndex) {\n              newLayout[full].x = newLayout[plIndex].x\n              newLayout[full].y = newLayout[plIndex].y\n              newLayout[full].w = 1\n              newLayout[plIndex].x = 0\n              newLayout[plIndex].y = 0\n              newLayout[plIndex].w = 2\n            }\n          } else {\n            if (newLayout[plIndex].w === 2) {\n              newLayout = reorder(newLayout)\n              let cIndex = _y < 1 ? 1 : 2\n              newLayout[plIndex].x = newLayout[cIndex].x\n              newLayout[plIndex].y = newLayout[cIndex].y\n              newLayout[cIndex].x = 0\n              newLayout[cIndex].y = 0\n              newLayout[cIndex].w = 2\n            } else {\n              let cIndex = -1\n              if (_y < 1) {\n                if (newLayout[plIndex].x > 0) {\n                  cIndex = newLayout.findIndex((item: any) => item.i !== 'pl' && item.w === 1)\n                }\n              } else {\n                if (newLayout[plIndex].x < 1) {\n                  cIndex = newLayout.findIndex((item: any) => item.i !== 'pl' && item.w === 1)\n                }\n              }\n              if (cIndex > -1) {\n                newLayout[cIndex].x = newLayout[plIndex].x\n                newLayout[plIndex].x = _y\n              }\n            }\n            newLayout[plIndex].w = 1\n          }\n          break\n        case 4:\n          if (_x !== _y) {\n            const c = _x\n            _x = _y\n            _y = c\n          }\n          if (newLayout[plIndex].x !== _x || newLayout[plIndex].y !== _y) {\n            let cIndex = newLayout.findIndex((item: any) => item.x === _x && item.y === _y)\n            newLayout[cIndex].x = newLayout[plIndex].x\n            newLayout[cIndex].y = newLayout[plIndex].y\n            newLayout[plIndex].x = _x\n            newLayout[plIndex].y = _y\n          }\n        default:\n          break\n      }\n      !isEqual(newLayout, layout) && setState({ layout: newLayout })\n    }\n  }\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault()\n    const type = e.dataTransfer.getData('type')\n    let newLayout = clone(layout)\n    const index = newLayout.findIndex((item: any) => item.i === 'pl')\n    if (items.includes(type)) {\n      switch (newLayout.length) {\n        case 0:\n          newLayout = [{ i: type, x: 0, y: 0, w: 2, h: 1 }]\n          setState({ layout: newLayout })\n          setTimeout(() => {\n            newLayout[0].h = 2\n            setState({ layout: newLayout })\n          }, 200)\n          break\n        case 2:\n        case 3:\n        case 4:\n          if (index > -1) {\n            newLayout[index].i = type\n            setState({ layout: newLayout })\n          }\n          break\n        default:\n          break\n      }\n      dispatch(updateLayout(newLayout))\n    }\n  }\n\n  return (\n    <SizeMe monitorHeight refreshRate={200} refreshMode=\"debounce\">\n      {({ size }: any) => (\n        <Box\n          divProps={{\n            onDragEnter: handleDragEnter,\n            onDragOver: handleDragOver,\n            onDrop: handleDrop\n          }}\n          className={cx('DashboardContent')}\n          flex=\"1\"\n          items=\"center\"\n          h=\"full\"\n          justify=\"center\"\n        >\n          <GridLayout\n            className=\"DashboardContent__wrapper\"\n            layout={layout}\n            cols={2}\n            margin={[0, 0]}\n            rowHeight={(size.height * 0.97) / 2}\n            width={size.width * 0.95}\n            autoSize={false}\n            draggableHandle=\".draghandler\"\n            useCSSTransforms={true}\n            isResizable={false}\n            onLayoutChange={handleLayoutChange}\n          >\n            {layout.map((item: any) => (\n              <div\n                className={cx('DashboardContent__item p-2', item.i === 'pl' && 'placeholder')}\n                key={item.i}\n              >\n                <DashboardItem\n                  i={item.i}\n                  label={item.i}\n                  onClose={handleClose}\n                  onFullScreen={handleFullScreen}\n                />\n              </div>\n            ))}\n          </GridLayout>\n        </Box>\n      )}\n    </SizeMe>\n  )\n}\n","// Components:\nimport * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\n// Service Worker\nimport registerServiceWorker from './registerServiceWorker'\n\n// Styles:\nimport '../node_modules/tt-react-ui-2/build/index.css'\nimport './styles.css'\n\n// Dashboard:\nimport { Dashboard } from 'components/Dashboard'\n\n// ================================================================================================\n\nReactDOM.render(\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Dashboard} />\n    </Switch>\n  </Router>,\n  document.getElementById('root')\n)\n\nregisterServiceWorker()\n","import * as React from 'react'\nimport cx from 'classnames'\nimport { Box, Button } from 'tt-react-ui-2'\n\n// Context:\nimport { DashboardContext, initialState, reducer } from 'context/dashboard'\nimport { toggleNav } from 'context/dashboard/actions'\n\n// Components:\nimport { DasboardNav } from './DashboardNav'\nimport { DashboardContent } from './DashboardContent'\n\n// Styles:\nimport './style.css'\n\n// ================================================================================================\n\nexport const Dashboard: React.FunctionComponent = props => {\n  // Hooks:\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  const { open } = state\n\n  return (\n    <DashboardContext.Provider value={{ state, dispatch }}>\n      <Box className={cx('Dashboard')} bg=\"first-dark\" flex=\"col\" h=\"screen\" overflow=\"hidden\" text=\"white\" w=\"full\">\n        <Box className=\"Dashboard__header\" items=\"end\" justify=\"between\" px=\"12\">\n          <Button\n            className=\"Dashboard__toggle-nav\"\n            bg=\"transparent\"\n            onClick={() => dispatch(toggleNav())}\n            text=\"xl\"\n          >\n            <span\n              className={cx(\n                'Dashboard__toggle-navIcon icon icon-indent mr-4 text-lg inline-block',\n                open && 'open'\n              )}\n            />\n            <span>Widgets</span>\n          </Button>\n        </Box>\n        <Box className=\"Dashboard__main\">\n          <DasboardNav open={open} />\n          <DashboardContent />\n        </Box>\n      </Box>\n    </DashboardContext.Provider>\n  )\n}\n"],"sourceRoot":""}