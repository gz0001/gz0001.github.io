{"version":3,"file":"main.d385410c88ecd788acf9.bundle.js","sources":["webpack:///./src/utils/getClassNames.ts"],"sourcesContent":["import classnames from 'classnames'\r\n\r\nexport const getClassNames = (reactProps: any, prefix = ':'): string => {\r\n  const TailwindStaticClasses = [\r\n    'container',\r\n    'clearfix',\r\n    'list-reset',\r\n    'italic',\r\n    'roman',\r\n    'uppercase',\r\n    'lowercase',\r\n    'capitalize',\r\n    'normalCase',\r\n    'underline',\r\n    'line-through',\r\n    'no-underline',\r\n    'antialiased',\r\n    'subpixel-antialiased',\r\n    'truncate',\r\n    'transition'\r\n  ]\r\n\r\n  const TailwindSpecialClasses = ['display', 'position', 'visibility']\r\n  const TailwindClasses = [\r\n    'basis',\r\n    'float',\r\n    'overflow',\r\n    'scrolling',\r\n    'pin',\r\n    'z',\r\n    'text',\r\n    'font',\r\n    'tracking',\r\n    'leading',\r\n    'align',\r\n    'whitespace',\r\n    'break',\r\n    'bg',\r\n    'border',\r\n    'rounded',\r\n    'flex',\r\n    'items',\r\n    'content',\r\n    'self',\r\n    'justify',\r\n    'p',\r\n    'px',\r\n    'py',\r\n    'pt',\r\n    'pr',\r\n    'pb',\r\n    'pl',\r\n    'm',\r\n    'mx',\r\n    'my',\r\n    'mt',\r\n    'mr',\r\n    'mb',\r\n    'ml',\r\n    'nm',\r\n    'nmx',\r\n    'nmy',\r\n    'nmt',\r\n    'nmr',\r\n    'nmb',\r\n    'nml',\r\n    'w',\r\n    'min-w',\r\n    'max-w',\r\n    'h',\r\n    'min-h',\r\n    'max-h',\r\n    'table',\r\n    'cursor',\r\n    'pointer-events',\r\n    'resize',\r\n    'select',\r\n    'appearance',\r\n    'shadow',\r\n    'object',\r\n    'opacity',\r\n    'outline',\r\n    'fill',\r\n    'stroke'\r\n  ]\r\n\r\n  const classNamesArray = Object.keys(reactProps).map(key => {\r\n    const value = reactProps[key]\r\n    const type = typeof reactProps[key]\r\n\r\n    if (TailwindStaticClasses.includes(key)) {\r\n      if (type === 'boolean' && value === true) {\r\n        return `${key}`\r\n      }\r\n      if (type === 'string') {\r\n        return value.split(',').map((v: string) => `${v.trim()}${prefix}${key}`)\r\n      }\r\n    }\r\n    if (TailwindSpecialClasses.includes(key)) {\r\n      if (type === 'string') {\r\n        return value.split(',').map((v: string) => v.trim())\r\n      }\r\n    }\r\n\r\n    if (TailwindClasses.includes(key)) {\r\n      const editedKey = key.includes('nm') ? key.replace('n', '-') : key\r\n      if (type === 'boolean' && value === true) {\r\n        return `${editedKey}`\r\n      }\r\n      if (type === 'string') {\r\n        const vals = value.split(',').map((v: string) => v.trim())\r\n\r\n        const classes = vals.map((vl: string) => {\r\n          const cls = vl.split(prefix)\r\n          switch (cls.length) {\r\n            case 3:\r\n              return `${cls[0]}:${cls[1]}:${editedKey}-${cls[2]}`\r\n            case 2:\r\n              return `${cls[0]}:${editedKey}-${cls[1]}`\r\n            default:\r\n              return `${editedKey}-${cls[0]}`\r\n          }\r\n        })\r\n\r\n        return classes\r\n      }\r\n    }\r\n  })\r\n\r\n  return classnames(classNamesArray)\r\n}\r\n"],"mappings":"AAAA","sourceRoot":""}