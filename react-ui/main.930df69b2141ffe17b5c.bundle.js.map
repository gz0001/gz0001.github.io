{"version":3,"file":"main.930df69b2141ffe17b5c.bundle.js","sources":["webpack:///./src/components/Box/index.tsx"],"sourcesContent":["// Components:\r\nimport * as React from 'react'\r\nimport cx from 'classnames'\r\nimport VideoCover from 'react-video-cover'\r\nimport { getClassNames } from '../../utils/getClassNames'\r\nimport { TailWindCSS } from './../../types/TailWindProps'\r\n\r\n// ================================================================================================\r\n\r\n// Props:\r\nexport interface BoxProps extends TailWindCSS {\r\n  children?: React.ReactNode\r\n  className?: string\r\n  /**Pass any normal div props here */\r\n  divProps?: React.HTMLProps<HTMLDivElement>\r\n  gradient?: string\r\n  image?: string\r\n  ref?: React.Ref<HTMLDivElement>\r\n  style?: React.CSSProperties\r\n  type?: 'artikel' | 'footer' | 'header' | 'nav' | 'div' | 'section'\r\n  video?: string\r\n}\r\n\r\nexport const Box: React.FunctionComponent<BoxProps> = React.memo( React.forwardRef((props, ref) => {\r\n  const { children, className, divProps, gradient, image, style, type, video, ...rest } = props\r\n\r\n  // Typ:\r\n  const Tag: any = type\r\n\r\n  // Background image:\r\n  let backgroundImage = 'none'\r\n  if (image) backgroundImage = `url(${image})`\r\n  if (gradient) backgroundImage = gradient\r\n\r\n  // ============================================\r\n\r\n  const renderVideo = () =>\r\n    video && (\r\n      <VideoCover\r\n        className=\"Box-video absolute\"\r\n        videoOptions={{\r\n          src: video,\r\n          autoPlay: true,\r\n          loop: true,\r\n          muted: true // needed for chrome\r\n        }}\r\n      />\r\n    )\r\n  return (\r\n    <Tag\r\n      className={cx(className && className, getClassNames(rest))}\r\n      style={{ ...style, backgroundImage }}\r\n      children={video ? [renderVideo(), children] : children}\r\n      {...divProps}\r\n      ref={ref}\r\n    />\r\n  )\r\n}))\r\n\r\nBox.defaultProps = {\r\n  display: 'flex',\r\n  position: 'relative',\r\n  type: 'div',\r\n  w: 'full'\r\n}\r\n"],"mappings":"AACA","sourceRoot":""}